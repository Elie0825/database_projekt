package se.elie.databas;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.sql.*;
import java.time.LocalDate;
import java.util.List;

class WorkRoleDAOTest {

    private Connection connection;
    private WorkRoleDAO workRoleDAO;


    @BeforeEach
    void setUp() throws SQLException {

        connection = DriverManager.getConnection("jdbc:hsqldb:mem:testdb", "SA", "");

        // Create the table structure before each test
        try (Statement stmt = connection.createStatement()) {
            stmt.execute("""
                CREATE TABLE IF NOT EXISTS work_role (
                    role_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    title VARCHAR(50) NOT NULL,
                    description VARCHAR(255) NOT NULL,
                    salary DOUBLE NOT NULL,
                    creation_date DATE NOT NULL
                )
            """);
        }


        workRoleDAO = new WorkRoleDAO(connection);
    }

    // Clean up after each test to ensure isolation
    void cleanUp() throws SQLException {
        try (Statement stmt = connection.createStatement()) {
            stmt.execute("DELETE FROM work_role");
        }
    }

    @Test
    void testInsertAndGetAllWorkRoles() throws SQLException {

        cleanUp();


        WorkRole newRole = new WorkRole("Software Engineer", "Responsible for developing software solutions.", 60000.00, LocalDate.now());


        workRoleDAO.insertWorkRole(newRole);

        List<WorkRole> workRoles = workRoleDAO.getAllWorkRoles();

        assertEquals(1, workRoles.size(), "There should be exactly 1 WorkRole in the database");


        WorkRole retrievedRole = workRoles.get(0);
        assertEquals(newRole.getTitle(), retrievedRole.getTitle(), "The title of the retrieved role should match the inserted role");
        assertEquals(newRole.getDescription(), retrievedRole.getDescription(), "The description of the retrieved role should match the inserted role");
        assertEquals(newRole.getSalary(), retrievedRole.getSalary(), "The salary of the retrieved role should match the inserted role");
        assertEquals(newRole.getCreationDate(), retrievedRole.getCreationDate(), "The creation date of the retrieved role should match the inserted role");
    }

    @Test
    void testInsertMultipleWorkRoles() throws SQLException {
        // Ensure the database is clean before running the test
        cleanUp();

        // Insert two WorkRoles
        WorkRole role1 = new WorkRole("Software Engineer", "Develops software.", 70000.00, LocalDate.now());
        WorkRole role2 = new WorkRole("Data Scientist", "Analyzes data.", 80000.00, LocalDate.now());

        workRoleDAO.insertWorkRole(role1);
        workRoleDAO.insertWorkRole(role2);

        // Retrieve all WorkRoles from the database
        List<WorkRole> workRoles = workRoleDAO.getAllWorkRoles();

        // Assert that there are exactly 2 WorkRoles in the list
        assertEquals(2, workRoles.size(), "There should be exactly 2 WorkRoles in the database");

        // Verify the roles are correct
        assertTrue(workRoles.stream().anyMatch(role -> role.getTitle().equals("Software Engineer")));
        assertTrue(workRoles.stream().anyMatch(role -> role.getTitle().equals("Data Scientist")));
    }


}
