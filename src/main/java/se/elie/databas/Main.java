package se.elie.databas;

import java.sql.*;
import java.time.LocalDate;
import java.util.List;
import java.util.Scanner;

public class Main {

    private static WorkRoleDAO workRoleDAO;

    public static void main(String[] args) {
        try (Connection connection = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/jdbcl", "SA", "")) {
            workRoleDAO = new WorkRoleDAO(connection);
            initializeDatabase(connection);

            Scanner scanner = new Scanner(System.in);
            while (true) {
                System.out.println("""
                        Choose an option:
                        1. Create new work role
                        2. Show all work roles
                        3. Show work role by ID
                        4. Update work role
                        5. Delete work role
                        6. Exit
                        """);
                int choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1 -> createWorkRole(scanner);
                    case 2 -> showAllWorkRoles();
                    case 3 -> showWorkRoleById(scanner);
                    case 4 -> workRoleDAO.updateWorkRole(scanner);
                    case 5 -> workRoleDAO.deleteWorkRole(scanner);
                    case 6 -> {
                        System.out.println("Program exited.");
                        return;
                    }
                    default -> System.out.println("Invalid choice. Please try again.");
                }
            }
        } catch (SQLException e) {
            System.err.println("An error occurred: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private static void initializeDatabase(Connection connection) throws SQLException {
        try (Statement stmt = connection.createStatement()) {
            stmt.execute("""
                CREATE TABLE IF NOT EXISTS work_role (
                    role_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    title VARCHAR(50) NOT NULL,
                    description VARCHAR(50) NOT NULL,
                    salary DOUBLE NOT NULL,
                    creation_date DATE NOT NULL
                )""");
        }
    }

    private static void createWorkRole(Scanner scanner) throws SQLException {
        System.out.println("Enter title:");
        String title = scanner.nextLine();
        System.out.println("Enter description:");
        String description = scanner.nextLine();
        System.out.println("Enter salary:");
        double salary = scanner.nextDouble();
        scanner.nextLine(); // Consume newline
        workRoleDAO.insertWorkRole(new WorkRole(title, description, salary, LocalDate.now()));
        System.out.println("Work role created successfully!");
    }

    private static void showAllWorkRoles() throws SQLException {
        List<WorkRole> roles = workRoleDAO.getAllWorkRoles();
        if (roles.isEmpty()) {
            System.out.println("No work roles found.");
        } else {
            for (WorkRole role : roles) {
                System.out.printf("ID: %d, Title: %s, Description: %s, Salary: %.2f, Date: %s%n",
                        role.getRoleId(), role.getTitle(), role.getDescription(),
                        role.getSalary(), role.getCreationDate());
            }
        }
    }

    private static void showWorkRoleById(Scanner scanner) throws SQLException {
        System.out.println("Enter work role ID:");
        int id = scanner.nextInt();
        scanner.nextLine();
        WorkRole role = workRoleDAO.getWorkRoleById(id);
        if (role != null) {
            System.out.printf("ID: %d, Title: %s, Description: %s, Salary: %.2f, Date: %s%n",
                    role.getRoleId(), role.getTitle(), role.getDescription(),
                    role.getSalary(), role.getCreationDate());
        } else {
            System.out.println("No work role found with ID: " + id);
        }

    }
    }